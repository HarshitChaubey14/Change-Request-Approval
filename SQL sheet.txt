Below is a selection from the "Customers" table

CustomerID	CustomerName	ContactName	Address		City	PostalCode	Country
1	    Alfreds Futterkist	Maria Anders	Obere Str. 57	Berlin	12209		Germany
...
4 	    Around the Horn	Thomas Hardy	120 Hanover Sq.	London	WA1 1DP		UK


SELECT
----------
SELECT * FROM Customers;
SELECT CustomerName, City FROM Customers;

SELECT DISTINCT Country FROM Customers;
SELECT COUNT(DISTINCT Country) FROM Customers; -> 21

-------------------
WHERE
-------------------
SELECT * FROM Customers WHERE Country = 'Mexico';
SELECT * FROM Customers WHERE CustomerID = 1;

following operators can be used in the WHERE clause:-
  <, >, <=, >=, <> (Not equal. Note: In some versions of SQL this operator may be written as !=)
  BETWEEN, LIKE, IN, AND, OR, and NOT

SELECT * FROM Products WHERE Price > 30;
SELECT * FROM Products WHERE Price BETWEEN 50 AND 60;
SELECT * FROM Customers WHERE City LIKE 's%';
SELECT * FROM Customers WHERE City IN ('Paris','London');
SELECT * FROM Customers WHERE Country='Germany' AND/OR City='Berlin';
SELECT * FROM Customers WHERE NOT Country='Germany';
SELECT * FROM Customers WHERE Country='Germany' AND (City='Berlin' OR City='München');
SELECT * FROM Customers WHERE NOT Country='Germany' AND NOT Country='USA';

-------------------
ORDER BY
-------------------
The following SQL statement selects all customers from the "Customers" table, sorted by the "Country" column:
	SELECT * FROM Customers ORDER BY Country;
	SELECT * FROM Customers ORDER BY Country DESC;

The following SQL statement selects all customers from the "Customers" table, sorted by the "Country" and the "CustomerName" column. This means that it orders by Country, but if some rows have the same Country, it orders them by CustomerName:
	SELECT * FROM Customers ORDER BY Country, CustomerName;

The following SQL statement selects all customers from the "Customers" table, sorted ascending by the "Country" and descending by the "CustomerName" column:
	SELECT * FROM Customers ORDER BY Country ASC, CustomerName DESC;

-------------------
INSERT INTO
-------------------
INSERT INTO Customers (CustomerName, ContactName, Address, City, PostalCode, Country)
VALUES ('Cardinal', 'Tom B. Erichsen', 'Skagen 21', 'Stavanger', '4006', 'Norway');

INSERT INTO Customers (CustomerName, City, Country)
VALUES ('Cardinal', 'Stavanger', 'Norway');


---------------------
NULL Values
---------------------
- A field with a NULL value is a field with no value. 
- If a field in a table is optional, it is possible to insert a new record or update a record without adding a value to this field. Then, the field will be saved with a NULL value.
- It is not possible to test for NULL values with comparison operators, such as =, <, or <>. We will have to use the IS NULL and IS NOT NULL operators instead.

SELECT CustomerName, ContactName, Address
FROM Customers
WHERE Address IS NULL/IS NOT NULL;

---------------------
UPDATE
---------------------
UPDATE Customers
SET ContactName = 'Alfred Schmidt', City= 'Frankfurt'
WHERE CustomerID = 1;

It is the WHERE clause that determines how many records will be updated.
following SQL statement will update the ContactName to "Juan" for all records where country is "Mexico"
	UPDATE Customers
	SET ContactName='Juan'
	WHERE Country='Mexico';


---------------------
DELETE 
---------------------
The DELETE statement is used to delete existing records in a table.

	DELETE FROM Customers WHERE CustomerName='Alfreds Futterkiste';

It is possible to delete all rows in a table without deleting the table. This means that the table structure, attributes, and indexes will be intact:

following SQL statement deletes all rows in the "Customers" table, without deleting the table:
	DELETE FROM Customers;

---------------------

---------------------




---------------------

---------------------



---------------------

---------------------




---------------------

---------------------
